package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"study-gator-backend/graph/gqlcontext"
	"study-gator-backend/graph/model"
)

// ID is the resolver for the id field.
func (r *classResolver) ID(ctx context.Context, obj *model.Class) (string, error) {
	return obj.GetID(), nil
}

// ClassInfo is the resolver for the classInfo field.
func (r *classResolver) ClassInfo(ctx context.Context, obj *model.Class) (*model.ClassInfo, error) {
	return &model.ClassInfo{
		UniversityName: obj.UniversityName,
		Name:           obj.Name,
		Description:    obj.Description,
	}, nil
}

// StudyGroups is the resolver for the studyGroups field.
func (r *classResolver) StudyGroups(ctx context.Context, obj *model.Class) ([]*model.StudyGroup, error) {
	me, err := gqlcontext.UserFromContext(ctx)
	if err != nil {
		return nil, err
	}

	var studyGroups []model.StudyGroup

	tx := model.DB.Joins("StudyGroupMember", model.DB.Where(&model.StudyGroupMember{UserID: int(me.ID)})).Find(&studyGroups, "class_id = ?", obj.ID)
	if tx.Error != nil {
		return nil, tx.Error
	}

	var studyGroupPointers []*model.StudyGroup
	for _, studyGroup := range studyGroups {
		studyGroupPointers = append(studyGroupPointers, &studyGroup)
	}

	return studyGroupPointers, nil
}

// Class returns ClassResolver implementation.
func (r *Resolver) Class() ClassResolver { return &classResolver{r} }

type classResolver struct{ *Resolver }

package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"study-gator-backend/graph/model"
)

// ID is the resolver for the id field.
func (r *friendRequestResolver) ID(ctx context.Context, obj *model.FriendRequest) (string, error) {
	return obj.GetID(), nil
}

// DateCreated is the resolver for the dateCreated field.
func (r *friendRequestResolver) DateCreated(ctx context.Context, obj *model.FriendRequest) (string, error) {
	return obj.CreatedAt.String(), nil
}

// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *model.User) (string, error) {
	return obj.GetID(), nil
}

// DateCreated is the resolver for the dateCreated field.
func (r *userResolver) DateCreated(ctx context.Context, obj *model.User) (string, error) {
	return obj.CreatedAt.String(), nil
}

// DateUpdated is the resolver for the dateUpdated field.
func (r *userResolver) DateUpdated(ctx context.Context, obj *model.User) (string, error) {
	return obj.UpdatedAt.String(), nil
}

// AuthInfo is the resolver for the authInfo field.
func (r *userResolver) AuthInfo(ctx context.Context, obj *model.User) (*model.AuthInfo, error) {
	return &model.AuthInfo{
		Provider: obj.Provider,
		Name:     obj.Name,
		Email:    obj.Email,
	}, nil
}

// Profile is the resolver for the profile field.
func (r *userResolver) Profile(ctx context.Context, obj *model.User) (*model.Profile, error) {
	return &model.Profile{
		FirstName:      obj.FirstName,
		LastName:       obj.LastName,
		School:         obj.School,
		GraduationYear: obj.GraduationYear,
	}, nil
}

// FriendRequest returns FriendRequestResolver implementation.
func (r *Resolver) FriendRequest() FriendRequestResolver { return &friendRequestResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type friendRequestResolver struct{ *Resolver }
type userResolver struct{ *Resolver }

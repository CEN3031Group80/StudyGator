package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"fmt"
	"study-gator-backend/graph/model"
)

// ID is the resolver for the id field.
func (r *directMessageResolver) ID(ctx context.Context, obj *model.DirectMessage) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Members is the resolver for the members field.
func (r *directMessageResolver) Members(ctx context.Context, obj *model.DirectMessage) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Members - members"))
}

// Posts is the resolver for the posts field.
func (r *directMessageResolver) Posts(ctx context.Context, obj *model.DirectMessage, limit int, offset int) ([]*model.DirectMessagePost, error) {
	panic(fmt.Errorf("not implemented: Posts - posts"))
}

// ID is the resolver for the id field.
func (r *directMessagePostResolver) ID(ctx context.Context, obj *model.DirectMessagePost) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Sender is the resolver for the sender field.
func (r *directMessagePostResolver) Sender(ctx context.Context, obj *model.DirectMessagePost) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Sender - sender"))
}

// DirectMessage returns DirectMessageResolver implementation.
func (r *Resolver) DirectMessage() DirectMessageResolver { return &directMessageResolver{r} }

// DirectMessagePost returns DirectMessagePostResolver implementation.
func (r *Resolver) DirectMessagePost() DirectMessagePostResolver {
	return &directMessagePostResolver{r}
}

type directMessageResolver struct{ *Resolver }
type directMessagePostResolver struct{ *Resolver }
